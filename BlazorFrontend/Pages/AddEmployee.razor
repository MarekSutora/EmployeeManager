@page "/add-employee"
@using BlazorFrontend.Utils
@using Shared.DTOs
@using System.Text.Json
@using System.Globalization
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager

<PageTitle>Add Employee</PageTitle>

<div class="d-flex justify-content-center">
    <div class="col-md-6">
        <h3 class="text-center">Add New Employee</h3>

        <EmployeeForm Employee="_employeeFormWrapper" Positions="_positions" OnValidSubmit="HandleValidSubmit" />

        @if (_errorMessage != null)
        {
            <div class="alert alert-danger mt-3" role="alert">
                @_errorMessage
            </div>
        }

        @if (_successMessage != null)
        {
            <div class="alert alert-success mt-3" role="alert">
                @_successMessage
            </div>
        }

        @if (_isLoading)
        {
            <div class="text-center mt-3">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }

        <div class="d-flex justify-content-center">
            <div class="col-md-6">
                <hr />
                <h4 class="text-center">Bulk Add Employees</h4>
                <InputFile class="form-control mb-3" accept=".json" OnChange="HandleEmployeeFileSelected" />
                <button class="btn btn-secondary" @onclick="UploadEmployees">Upload Employees</button>

                <hr />
                <h4 class="text-center">Bulk Add Positions</h4>
                <InputFile class="form-control mb-3" accept=".json" OnChange="HandlePositionFileSelected" />
                <button class="btn btn-secondary" @onclick="UploadPositions">Upload Positions</button>
            </div>
        </div>
    </div>
</div>

@code {
    private EmployeeFormWrapper _employeeFormWrapper = new();
    private List<ReadPositionDto> _positions = new();
    private string? _errorMessage;
    private string? _successMessage;
    private IBrowserFile? _selectedEmployeeFile;
    private IBrowserFile? _selectedPositionFile;
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPositionsAsync();
    }

    private async Task LoadPositionsAsync()
    {
        _positions = await _httpClient.GetFromJsonAsync<List<ReadPositionDto>>("Positions") ?? new List<ReadPositionDto>();
    }

    private async Task HandleValidSubmit(EmployeeFormWrapper employee)
    {
        ResetMessages();
        _isLoading = true;

        try
        {
            var countryCode = await CountryCodeHelper.GetCountryCodeFromIp(employee.IpAddress);
            if (countryCode == null)
            {
                _errorMessage = "Failed to retrieve country code from IP address.";
                return;
            }

            var newEmployee = CreateEmployeeDto(employee, countryCode);
            await PostNewEmployeeAsync(newEmployee);
        }
        catch
        {
            _errorMessage = "An error occurred when submitting the form";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ResetMessages()
    {
        _errorMessage = null;
        _successMessage = null;
    }

    private CreateEmployeeDto CreateEmployeeDto(EmployeeFormWrapper employee, string countryCode)
    {
        return new CreateEmployeeDto
            {
                Name = employee.Name,
                Surname = employee.Surname,
                BirthDate = employee.BirthDate,
                IpAddress = employee.IpAddress,
                IpCountryCode = countryCode,
                PositionId = employee.PositionId
            };
    }

    private async Task PostNewEmployeeAsync(CreateEmployeeDto newEmployee)
    {
        var response = await _httpClient.PostAsJsonAsync("Employees", newEmployee);

        if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            _errorMessage = await response.Content.ReadAsStringAsync();
        }
        else if (response.IsSuccessStatusCode)
        {
            _successMessage = "Employee created successfully.";
            _navigationManager.NavigateTo("/");
        }
        else
        {
            _errorMessage = "Error creating a new Employee.";
        }
    }

    private void HandleEmployeeFileSelected(InputFileChangeEventArgs e)
    {
        _selectedEmployeeFile = e.File;
    }

    private void HandlePositionFileSelected(InputFileChangeEventArgs e)
    {
        _selectedPositionFile = e.File;
    }

    private async Task UploadEmployees()
    {
        ResetMessages();
        _isLoading = true;

        try
        {
            if (_selectedEmployeeFile != null)
            {
                var employees = await ParseEmployeeFileAsync(_selectedEmployeeFile);

                if (employees != null)
                {
                    await UploadEmployeesToServerAsync(employees);
                }
            }
            else
            {
                _errorMessage = "Please select a valid JSON file to upload.";
            }
        }
        catch
        {
            _errorMessage = "An error occurred while uploading employees.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task<List<BulkCreateEmployeeDto>?> ParseEmployeeFileAsync(IBrowserFile employeeFile)
    {
        using var stream = employeeFile.OpenReadStream();
        using var reader = new StreamReader(stream);
        var content = await reader.ReadToEndAsync();

        try
        {
            return await ProcessEmployeeJson(content);
        }
        catch (JsonException)
        {
            _errorMessage = "JSON Parsing Error";
            return null;
        }
    }

    private async  Task<List<BulkCreateEmployeeDto>?> ProcessEmployeeJson(string content)
    {
        var jsonDocument = JsonDocument.Parse(content);
        var rootElement = jsonDocument.RootElement.Clone();

        if (rootElement.TryGetProperty("employees", out var employeesElement))
        {
            var newContent = UpdateEmployeeDates(content, employeesElement);

            var employeesJson = JsonDocument.Parse(newContent).RootElement.GetProperty("employees").GetRawText();
            var employees = JsonSerializer.Deserialize<List<BulkCreateEmployeeDto>>(employeesJson);

            await UpdateEmployeeCountryCodes(employees);

            return employees;
        }
        else
        {
            _errorMessage = "The uploaded JSON file does not contain the expected 'employees' property.";
            return null;
        }
    }

    private string UpdateEmployeeDates(string content, JsonElement employeesElement)
    {
        foreach (var employeeElement in employeesElement.EnumerateArray())
        {
            if (employeeElement.TryGetProperty("BirthDate", out var birthDateElement))
            {
                var originalDate = birthDateElement.GetString();
                if (DateTime.TryParseExact(originalDate, "yyyy/MM/dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out var dateTime))
                {
                    var formattedDate = dateTime.ToString("yyyy-MM-ddTHH:mm:ss");
                    content = content.Replace(originalDate, formattedDate);
                }
            }
        }
        return content;
    }

    private async Task UpdateEmployeeCountryCodes(List<BulkCreateEmployeeDto>? employees)
    {
        if (employees != null)
        {
            foreach (var employee in employees)
            {
                var countryCode = await CountryCodeHelper.GetCountryCodeFromIp(employee.IpAddress);
                if (countryCode != null)
                {
                    employee.IpCountryCode = countryCode;
                }
            }
        }
    }

    private async Task UploadEmployeesToServerAsync(List<BulkCreateEmployeeDto>? employees)
    {
        var response = await _httpClient.PostAsJsonAsync("Employees/Upload", employees);

        if (!response.IsSuccessStatusCode)
        {
            _errorMessage = "Failed to upload employees.";
        }
        else
        {
            _successMessage = "Employees uploaded successfully.";
            _navigationManager.NavigateTo("/");
        }
    }

    private async Task UploadPositions()
    {
        ResetMessages();
        _isLoading = true;

        try
        {
            if (_selectedPositionFile != null)
            {
                var positions = await ParsePositionFileAsync(_selectedPositionFile);

                if (positions != null)
                {
                    await UploadPositionsToServerAsync(positions);
                }
            }
            else
            {
                _errorMessage = "Please select a valid JSON file to upload.";
            }
        }
        catch
        {
            _errorMessage = "An error occurred while uploading positions.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task<List<CreatePositionDto>?> ParsePositionFileAsync(IBrowserFile positionFile)
    {
        using var stream = positionFile.OpenReadStream();
        using var reader = new StreamReader(stream);
        var content = await reader.ReadToEndAsync();

        try
        {
            return ProcessPositionJson(content);
        }
        catch (JsonException)
        {
            _errorMessage = "JSON Parsing Error";
            return null;
        }
    }

    private List<CreatePositionDto>? ProcessPositionJson(string content)
    {
        var jsonDocument = JsonDocument.Parse(content);
        var rootElement = jsonDocument.RootElement.Clone();

        if (rootElement.TryGetProperty("positions", out var positionsElement))
        {
            var positionsList = new List<CreatePositionDto>();

            foreach (var positionElement in positionsElement.EnumerateArray())
            {
                var positionName = positionElement.GetString();
                if (!string.IsNullOrEmpty(positionName))
                {
                    positionsList.Add(new CreatePositionDto { Name = positionName });
                }
            }

            return positionsList;
        }
        else
        {
            _errorMessage = "The uploaded JSON file does not contain the expected 'positions' property.";
            return null;
        }
    }

    private async Task UploadPositionsToServerAsync(List<CreatePositionDto> positions)
    {
        var response = await _httpClient.PostAsJsonAsync("Positions/Upload", positions);

        if (!response.IsSuccessStatusCode || positions.Count == 0)
        {
            _errorMessage = "Failed to upload positions.";
        }
        else
        {
            _successMessage = "Positions uploaded successfully.";
            await LoadPositionsAsync();
        }
    }
}
