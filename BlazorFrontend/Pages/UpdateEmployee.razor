@page "/update-employee/{id:int}"
@using BlazorFrontend.Utils
@using Shared
@using Shared.DTOs
@using System.Text.Json
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager

<PageTitle>Update Employee</PageTitle>

<h3 class="text-center">Update Employee</h3>
@if (_employeeFormWrapper == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="col-md-6">
            <EmployeeForm Employee="_employeeFormWrapper" Positions="_positions" OnValidSubmit="HandleValidSubmit" />
            @if (_errorMessage != null)
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @_errorMessage
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    private List<ReadPositionDto> _positions = new();
    private EmployeeFormWrapper? _employeeFormWrapper;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _positions = await _httpClient.GetFromJsonAsync<List<ReadPositionDto>>("Positions") ?? new List<ReadPositionDto>();
            var employeeDto = await _httpClient.GetFromJsonAsync<ReadEmployeeDto>($"Employees/{Id}");
            if (employeeDto != null)
            {
                _employeeFormWrapper = new EmployeeFormWrapper
                {
                    Name = employeeDto.Name,
                    Surname = employeeDto.Surname,
                    BirthDate = employeeDto.BirthDate,
                    IpAddress = employeeDto.IpAddress,
                    PositionId = employeeDto.Position.Id,     
                };
            }
        }
        catch
        {
            _errorMessage = $"An error occurred while loading data";
        }
    }

    private async Task HandleValidSubmit(EmployeeFormWrapper employee)
    {
        try
        {
            _errorMessage = null;

            var countryCode = await CountryCodeHelper.GetCountryCodeFromIp(employee.IpAddress);
            if (countryCode == null)
            {
                _errorMessage = "Failed to retrieve country code from IP address.";
                return;
            }

            var updateEmployee = new UpdateEmployeeDto
            {
                Name = employee.Name,
                Surname = employee.Surname,
                BirthDate = employee.BirthDate,
                IpAddress = employee.IpAddress,
                IpCountryCode = countryCode,
                PositionId = employee.PositionId
            };

            var response = await _httpClient.PutAsJsonAsync($"Employees/{Id}", updateEmployee);
            var result = response.IsSuccessStatusCode;

            if (!result)
            {
                _errorMessage = response.Content.ToString() ?? "Error updating the Employee.";
            }
            else
            {
                _navigationManager.NavigateTo("/");
            }
        }
        catch
        {
            _errorMessage = $"\nAn error occurred while submitting form";
        }
    }
}
