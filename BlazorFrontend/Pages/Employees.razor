@page "/"
@using Shared.DTOs
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Employees</PageTitle>

<h1>Employees</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Birth Date</th>
                <th>Position</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td><a href="#" @onclick="() => ShowEmployeeDetails(employee)">@employee.Name</a></td>
                    <td><a href="#" @onclick="() => ShowEmployeeDetails(employee)">@employee.Surname</a></td>
                    <td>@employee.BirthDate.ToShortDateString()</td>
                    <td>@employee.Position.Name</td>
                    <td>
                        <a class="btn btn-primary btn-sm" href="update-employee/@employee.Id">Update</a>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteEmployee(employee.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (selectedEmployee != null)
{
    <div class="modal show" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Employee Details</h5>
                    <button type="button" class="btn-close" @onclick="() => selectedEmployee = null"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Name:</strong> @selectedEmployee.Name</p>
                    <p><strong>Surname:</strong> @selectedEmployee.Surname</p>
                    <p><strong>Birth Date:</strong> @selectedEmployee.BirthDate.ToShortDateString()</p>
                    <p><strong>Position:</strong> @selectedEmployee.Position.Name</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => selectedEmployee = null">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@code {
    private IEnumerable<ReadEmployeeDto>? employees;
    private ReadEmployeeDto? selectedEmployee;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        try
        {
            employees = await Http.GetFromJsonAsync<IEnumerable<ReadEmployeeDto>>("https://localhost:7096/Employees");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading employees: {ex.Message}";
        }
    }

    private void ShowEmployeeDetails(ReadEmployeeDto employee)
    {
        selectedEmployee = employee;
    }

    private void UpdateEmployee(int id)
    {
        Navigation.NavigateTo($"/update-employee/{id}");
    }

    private async Task DeleteEmployee(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7096/Employees/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadEmployees();
            }
            else
            {
                errorMessage = "Failed to delete employee.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
